## Common build steps for plugins
# Cross-compilation tools
FROM --platform=$BUILDPLATFORM tonistiigi/xx AS xx

FROM --platform=$BUILDPLATFORM golang:1.16.6-alpine AS builder

# Copy cross-compilation tools
COPY --from=xx / /

# To optimize caching and multi-architecture we try to get in as much upfront
# work as possible before branching out using our actual source
WORKDIR /plugins/api
COPY api/go.* ./
RUN go mod download

WORKDIR /plugins/common
COPY common/go.* ./
RUN go mod download

WORKDIR /plugins
COPY api ./api
COPY common ./common

## Taper plugin build steps
# Cache optimization: Avoid go module downloads unless go.mod/go.sum changed
WORKDIR /plugins/taper/extensions/http
COPY taper/extensions/http/go.* ./
RUN go mod download

WORKDIR /plugins/taper
COPY taper/go.* ./
RUN go mod download

ARG TARGETPLATFORM VERSION
COPY taper .
RUN apk add --no-cache clang lld
RUN xx-apk add --no-cache binutils-gold gcc libpcap-dev musl-dev
ENV CGO_ENABLED=1
RUN export QEMU_LD_PREFIX=/$(xx-info) && xx-go build -ldflags="-s -w \
     -X 'github.com/openclarity/apiclarity/plugins/taper/version.Version=${VERSION}'" -o agent .

WORKDIR /plugins/taper/extensions/http

COPY taper/extensions/http .
RUN export QEMU_LD_PREFIX=/$(xx-info) && xx-go build -buildmode=plugin -o ../http.so .

FROM alpine:3.14

RUN apk add --no-cache bash libpcap tcpdump
WORKDIR /app

# Copy binary and config files from /build to root folder of scratch container.
COPY --from=builder ["/plugins/taper/agent", "."]
COPY --from=builder ["/plugins/taper/extensions/http.so", "extensions/http.so"]

ENTRYPOINT ["/app/agent"]
