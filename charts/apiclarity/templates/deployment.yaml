apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "apiclarity.name" . }}
  namespace: '{{ .Release.Namespace }}'
  labels:
    {{ include "apiclarity.labels" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "apiclarity.name" . }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ include "apiclarity.name" . }}
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: {{ include "apiclarity.serviceAccountName" . }}
      {{- if index .Values "apiclarity-postgresql" "enabled" -}}
      initContainers:
        - name: '{{ include "apiclarity.name" . }}-wait-for-db'
          image: {{ index .Values "apiclarity-postgresql" "image" "registry" | default "docker.io" }}/{{ index .Values "apiclarity-postgresql" "image" "repository" | default "bitnami/postgresql" }}:{{ index .Values "apiclarity-postgresql" "image" "tag" | default "14.4.0-debian-11-r4" }}
          command: ['sh', '-c', 'until pg_isready -h {{ include "apiclarity.name" . }}-postgresql -p 5432 -U "postgres" -d "dbname={{ index .Values "apiclarity-postgresql" "auth" "database" }}";
            do echo waiting for database; sleep 2; done;']
          securityContext:
            runAsUser: 1001
          resources:
          {{- toYaml .Values.apiclarity.initResources | nindent 12 }}
      {{- end}}
      containers:
        - name: apiclarity
          image: '{{ .Values.global.docker.registry }}/apiclarity:{{ .Values.apiclarity.docker.imageTag }}'
          imagePullPolicy: {{ .Values.apiclarity.docker.imagePullPolicy }}
          args:
            - run
            - --log-level
            - {{ .Values.apiclarity.logLevel }}
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            # space separated list of response headers to ignore when reconstructing the spec
            - name: RESPONSE_HEADERS_TO_IGNORE
              valueFrom:
                configMapKeyRef:
                  name: '{{ include "apiclarity.name" . }}-headers-to-ignore-configmap'
                  key: response.headers
            # space separated list of request headers to ignore when reconstructing the spec
            - name: REQUEST_HEADERS_TO_IGNORE
              valueFrom:
                configMapKeyRef:
                  name: '{{ include "apiclarity.name" . }}-headers-to-ignore-configmap'
                  key: request.headers
            - name: TRACE_SAMPLING_ENABLED
              value: "{{ .Values.global.traceSampling.enable }}"
            - name: BFLA_AUTOMATIC_LEARNING_AND_DETECTION
              value: "{{ .Values.global.bflaAutomaticLearningAndDetection.enable }}"
            - name: DB_NAME
              value: {{ index .Values "apiclarity-postgresql" "auth" "database" }}
            - name: DB_HOST
              value: "{{ index .Values "apiclarity-postgresql" "host" "endpoint" | default (printf "%s-postgresql" (include "apiclarity.name" .)) }}"
            - name: DB_PORT_NUMBER
              value: "5432"
            - name: DB_USER
              value: "postgres"
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ index .Values "apiclarity-postgresql" "auth" "existingSecret" }}
                  key: postgres-password
            - name: STATE_BACKUP_FILE_NAME
              value: /apiclarity/state.gob
            {{- if .Values.apiclarity.tls.enabled }}
            - name: ENABLE_TLS
              value: "{{ .Values.apiclarity.tls.enabled }}"
            - name: ROOT_CERT_FILE_PATH
              value: /etc/root-ca/{{ .Values.apiclarity.tls.rootCertFileName }}
            - name: TLS_SERVER_CERT_FILE_PATH
              value: /etc/certs/{{ .Values.apiclarity.tls.tlsServerCertFileName }}
            - name: TLS_SERVER_KEY_FILE_PATH
              value: /etc/certs/{{ .Values.apiclarity.tls.tlsServerKeyFileName }}
            {{- end }}
            {{- if .Values.apiclarity.notificationURLPrefix }}
            - name: NOTIFICATION_BACKEND_PREFIX
              value: {{ .Values.apiclarity.notificationURLPrefix }}
            {{- end }}
            - name: FUZZER_JOB_TEMPLATE_CONFIG_MAP_NAME
              value: "{{ include "apiclarity.name" . }}-fuzzer-template"
          {{- range $key, $val := .Values.apiclarity.env.plugins }}
            - name: {{ $key }}
              value: {{ $val | quote }}
          {{- end }}
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8081
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          securityContext:
            capabilities:
              drop:
                - all
            runAsNonRoot: true
            runAsGroup: 1000
            runAsUser: 1000
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
          {{- toYaml .Values.apiclarity.resources | nindent 12 }}
          volumeMounts:
            - name: {{ include "apiclarity.name" . }}
              mountPath: '/apiclarity'
            {{- if .Values.apiclarity.tls.enabled }}
            - name: certs
              mountPath: /etc/certs
              readOnly: true
            - name: root-ca
              mountPath: /etc/root-ca
              readOnly: true
            {{- end }}
      volumes:
      - name: {{ include "apiclarity.name" . }}
        persistentVolumeClaim:
          claimName: {{ include "apiclarity.name" . }}-pvc
      {{- if .Values.apiclarity.tls.enabled }}
      - name: certs
        secret:
          secretName: {{ .Values.apiclarity.tls.tlsServerCertsSecretName }}
      - name: root-ca
        configMap:
          name: {{ .Values.apiclarity.tls.rootCACertConfigMapName }}
      {{- end }}
      securityContext:
        fsGroup: 1000
