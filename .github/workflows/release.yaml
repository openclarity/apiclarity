name: Release

on:
  workflow_dispatch:
    inputs:
      pre_version:
        description: Previous Version
        required: true
      version:
        description: Release Version
        required: true

env:
  GO_VERSION: 1.17
  OTEL_COLLECTOR_VERSION: 0.60.0

permissions:
  packages: write
  contents: write

jobs:
  verification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - shell: bash
        run: |
          sudo apt-get install libpcap-dev

      - name: Check licenses
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: make license-check

      - name: Run verification
        run: make check

      - name: Previous tag validation
        run: |
          tag='${{ github.event.inputs.pre_version }}'
          [[ $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] || exit 1

      - name: Tag validation
        run: |
          tag='${{ github.event.inputs.version }}'
          [[ $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] || exit 1

  release:
    needs: verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Tag
        run: |
          tag='${{ github.event.inputs.version }}'

          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

          sed -i 's/image: ghcr.io\/openclarity\/kong-plugin:latest/image: ghcr.io\/openclarity\/kong-plugin:'"$tag"'/g' plugins/gateway/kong/deploy/patch-deployment.yaml
          git commit plugins/gateway/kong/deploy/patch-deployment.yaml -m "workflow: update tag in kong deploy script"

          sed -i 's/image: ghcr.io\/openclarity\/tyk-plugin-v3.2.2:latest/image: ghcr.io\/openclarity\/tyk-plugin-v3.2.2:'"$tag"'/g' plugins/gateway/tyk/deploy/patch-deployment.yaml
          git commit plugins/gateway/tyk/deploy/patch-deployment.yaml -m "workflow: update tag in tyk deploy script"

          git tag --annotate --message "Tag for release $tag" "$tag"
          git push origin "refs/tags/$tag"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Get current timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push APIClarity
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/openclarity/apiclarity:${{ github.event.inputs.version }}
          file: Dockerfile
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            VERSION=${{ github.event.inputs.version }}
            BUILD_TIMESTAMP=${{ steps.timestamp.outputs.timestamp }}
            COMMIT_HASH=${{ github.sha }}

      - name: Build and Push Kong plugin
        uses: docker/build-push-action@v2
        with:
          context: plugins
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/openclarity/kong-plugin:${{ github.event.inputs.version }}
          file: plugins/Dockerfile.kong
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Fix Tyk Plugin API dep
        id: tyk-dep
        run: |
          cd plugins/gateway/tyk/v3.2.2
          go mod edit -replace github.com/openclarity/apiclarity/plugins/api@v0.0.0=./../api
          go mod edit -replace github.com/openclarity/apiclarity/plugins/common@v0.0.0=./../common

      - name: Build and Push Tyk plugin
        uses: docker/build-push-action@v2
        with:
          context: plugins
          platforms: linux/amd64 # tykio/tyk-plugin-compiler does not currently support other architectures
          tags: ghcr.io/openclarity/tyk-plugin-v3.2.2:${{ github.event.inputs.version }}
          file: plugins/Dockerfile.tyk.v3.2.2
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Undo Tyk Plugin API dep change
        id: undo-tyk-dep
        run: git checkout -- plugins/gateway/tyk/v3.2.2/go.mod

      - name: Build and Push passive taper
        uses: docker/build-push-action@v2
        with:
          context: plugins
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/openclarity/passive-taper:${{ github.event.inputs.version }}
          file: plugins/Dockerfile.taper
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            VERSION=${{ github.event.inputs.version }}

      - name: Build and Push OpenTelemetry Collector with APIClarity plugin
        uses: docker/build-push-action@v2
        with:
          context: plugins
          tags: ghcr.io/openclarity/otel-apiclarityexporter:${{ github.event.inputs.version }}
          file: plugins/Dockerfile.otel-collector
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            OTEL_COLLECTOR_VERSION=${{ env.OTEL_COLLECTOR_VERSION }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: v0.178.0
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ github.event.inputs.version }}
          GORELEASER_PREVIOUS_TAG: ${{ github.event.inputs.pre_version }}

  helm_release:
    needs: release
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Tag validation
        run: |
          tag='${{ github.event.inputs.version }}'
          [[ $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] || exit 1

      - name: Replace release version
        id: replace_version
        run: find . -type f -name "values.yaml" -o -name "Chart.yaml" |
          xargs sed -i -e s/latest/${{ github.event.inputs.version }}/g

      - name: Replace wasm filter commit id and sha256
        id: replace_wasm_filter_commit_id_for_kuma
        run: |
          WASM_COMMIT="$(git rev-parse HEAD:wasm-filters)"
          WASM_SHA256="$(sha256sum wasm-filters/bin/release/http-trace-filter.wasm | cut -d' ' -f1)"
          WASM_URI="https://raw.githubusercontent.com/openclarity/wasm-filters/${WASM_COMMIT}/bin/release/http-trace-filter.wasm"
          sed -i -e "s/sha256:.*/sha256: \"${WASM_SHA256}\"/" plugins/kuma/charts/values.yaml
          sed -i -e "s#wasmFilterURI:.*#wasmFilterURI: \"${WASM_URI}\"#" plugins/kuma/charts/values.yaml

      - name: Set up Helm
        uses: azure/setup-helm@v3.5
        with:
          version: v3.10.3

      - uses: actions/setup-python@v4.4.0
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.3.1

      - name: Add Bitnami Repository
        run: helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: Run chart-testing (lint)
        run: ct lint --chart-dirs charts,plugins/kuma --check-version-increment=false --validate-maintainers=false --all

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.5.0
        with:
          charts_dir: charts
          config: charts/cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Run chart-releaser for kuma plugin
        uses: helm/chart-releaser-action@v1.5.0
        with:
          charts_dir: plugins/kuma
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
